;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit CPUTop : 
  module ProgramCounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip stop : UInt<1>, flip jump : UInt<1>, flip run : UInt<1>, flip programCounterJump : UInt<16>, programCounter : UInt<16>}
    
    node notRun = eq(io.run, UInt<1>("h00")) @[ProgramCounter.scala 14:16]
    node notRunOrStop = or(notRun, io.stop) @[ProgramCounter.scala 15:29]
    node _T = add(io.programCounter, UInt<1>("h01")) @[ProgramCounter.scala 17:43]
    node programCounter1 = tail(_T, 1) @[ProgramCounter.scala 17:43]
    node result1 = mux(io.jump, io.programCounterJump, programCounter1) @[ProgramCounter.scala 19:20]
    node result2 = mux(notRunOrStop, io.programCounter, result1) @[ProgramCounter.scala 21:20]
    reg reg1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[ProgramCounter.scala 22:21]
    reg1 <= result2 @[ProgramCounter.scala 23:8]
    io.programCounter <= reg1 @[ProgramCounter.scala 24:21]
    
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 20:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 22:37]
      io.testerDataRead <= _T @[DataMemory.scala 22:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 23:17]
      when io.testerWriteEnable : @[DataMemory.scala 24:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 26:25]
        skip @[DataMemory.scala 24:32]
      skip @[DataMemory.scala 20:24]
    else : @[DataMemory.scala 28:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 30:31]
      io.dataRead <= _T_2 @[DataMemory.scala 30:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 31:23]
      when io.writeEnable : @[DataMemory.scala 32:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 34:19]
        skip @[DataMemory.scala 32:26]
      skip @[DataMemory.scala 28:16]
    
  module ProgramMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, instructionRead : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[ProgramMemory.scala 16:20]
    when io.testerEnable : @[ProgramMemory.scala 18:24]
      read mport _T = memory[io.testerAddress], clock @[ProgramMemory.scala 20:37]
      io.testerDataRead <= _T @[ProgramMemory.scala 20:23]
      io.instructionRead <= UInt<32>("h00") @[ProgramMemory.scala 21:24]
      when io.testerWriteEnable : @[ProgramMemory.scala 22:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[ProgramMemory.scala 24:25]
        skip @[ProgramMemory.scala 22:32]
      skip @[ProgramMemory.scala 18:24]
    else : @[ProgramMemory.scala 26:16]
      read mport _T_2 = memory[io.address], clock @[ProgramMemory.scala 28:38]
      io.instructionRead <= _T_2 @[ProgramMemory.scala 28:24]
      io.testerDataRead <= UInt<32>("h00") @[ProgramMemory.scala 29:23]
      skip @[ProgramMemory.scala 26:16]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip aSel : UInt<3>, flip bSel : UInt<3>, flip writeData : UInt<32>, flip writeSel : UInt<3>, flip writeEnable : UInt<1>, a : UInt<32>, b : UInt<32>}
    
    reg R0 : UInt<32>, clock @[RegisterFile.scala 18:15]
    reg R1 : UInt<32>, clock @[RegisterFile.scala 19:15]
    reg R2 : UInt<32>, clock @[RegisterFile.scala 20:15]
    reg R3 : UInt<32>, clock @[RegisterFile.scala 21:15]
    reg R4 : UInt<32>, clock @[RegisterFile.scala 22:15]
    reg R5 : UInt<32>, clock @[RegisterFile.scala 23:15]
    reg R6 : UInt<32>, clock @[RegisterFile.scala 24:15]
    reg R7 : UInt<32>, clock @[RegisterFile.scala 25:15]
    io.a <= UInt<1>("h00") @[RegisterFile.scala 27:8]
    node _T = eq(UInt<1>("h00"), io.aSel) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.a <= R0 @[RegisterFile.scala 30:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), io.aSel) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.a <= R1 @[RegisterFile.scala 31:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.aSel) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.a <= R2 @[RegisterFile.scala 32:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.aSel) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.a <= R3 @[RegisterFile.scala 33:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h04"), io.aSel) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.a <= R4 @[RegisterFile.scala 34:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h05"), io.aSel) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.a <= R5 @[RegisterFile.scala 35:20]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<3>("h06"), io.aSel) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.a <= R6 @[RegisterFile.scala 36:20]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<3>("h07"), io.aSel) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.a <= R7 @[RegisterFile.scala 37:20]
                    skip @[Conditional.scala 39:67]
    io.b <= UInt<1>("h00") @[RegisterFile.scala 40:8]
    node _T_8 = eq(UInt<1>("h00"), io.bSel) @[Conditional.scala 37:30]
    when _T_8 : @[Conditional.scala 40:58]
      io.b <= R0 @[RegisterFile.scala 43:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_9 = eq(UInt<1>("h01"), io.bSel) @[Conditional.scala 37:30]
      when _T_9 : @[Conditional.scala 39:67]
        io.b <= R1 @[RegisterFile.scala 44:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_10 = eq(UInt<2>("h02"), io.bSel) @[Conditional.scala 37:30]
        when _T_10 : @[Conditional.scala 39:67]
          io.b <= R2 @[RegisterFile.scala 45:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_11 = eq(UInt<2>("h03"), io.bSel) @[Conditional.scala 37:30]
          when _T_11 : @[Conditional.scala 39:67]
            io.b <= R3 @[RegisterFile.scala 46:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h04"), io.bSel) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              io.b <= R4 @[RegisterFile.scala 47:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_13 = eq(UInt<3>("h05"), io.bSel) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                io.b <= R5 @[RegisterFile.scala 48:20]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_14 = eq(UInt<3>("h06"), io.bSel) @[Conditional.scala 37:30]
                when _T_14 : @[Conditional.scala 39:67]
                  io.b <= R6 @[RegisterFile.scala 49:20]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_15 = eq(UInt<3>("h07"), io.bSel) @[Conditional.scala 37:30]
                  when _T_15 : @[Conditional.scala 39:67]
                    io.b <= R7 @[RegisterFile.scala 50:20]
                    skip @[Conditional.scala 39:67]
    node _T_16 = eq(io.writeEnable, UInt<1>("h01")) @[RegisterFile.scala 53:23]
    when _T_16 : @[RegisterFile.scala 53:32]
      node _T_17 = eq(UInt<1>("h00"), io.writeSel) @[Conditional.scala 37:30]
      when _T_17 : @[Conditional.scala 40:58]
        R0 <= io.writeData @[RegisterFile.scala 55:18]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_18 = eq(UInt<1>("h01"), io.writeSel) @[Conditional.scala 37:30]
        when _T_18 : @[Conditional.scala 39:67]
          R1 <= io.writeData @[RegisterFile.scala 56:18]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_19 = eq(UInt<2>("h02"), io.writeSel) @[Conditional.scala 37:30]
          when _T_19 : @[Conditional.scala 39:67]
            R2 <= io.writeData @[RegisterFile.scala 57:18]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_20 = eq(UInt<2>("h03"), io.writeSel) @[Conditional.scala 37:30]
            when _T_20 : @[Conditional.scala 39:67]
              R3 <= io.writeData @[RegisterFile.scala 58:18]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_21 = eq(UInt<3>("h04"), io.writeSel) @[Conditional.scala 37:30]
              when _T_21 : @[Conditional.scala 39:67]
                R4 <= io.writeData @[RegisterFile.scala 59:18]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_22 = eq(UInt<3>("h05"), io.writeSel) @[Conditional.scala 37:30]
                when _T_22 : @[Conditional.scala 39:67]
                  R5 <= io.writeData @[RegisterFile.scala 60:18]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_23 = eq(UInt<3>("h06"), io.writeSel) @[Conditional.scala 37:30]
                  when _T_23 : @[Conditional.scala 39:67]
                    R6 <= io.writeData @[RegisterFile.scala 61:18]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_24 = eq(UInt<3>("h07"), io.writeSel) @[Conditional.scala 37:30]
                    when _T_24 : @[Conditional.scala 39:67]
                      R7 <= io.writeData @[RegisterFile.scala 62:18]
                      skip @[Conditional.scala 39:67]
      skip @[RegisterFile.scala 53:32]
    
  module ControlUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip opCode : UInt<6>, isIm : UInt<1>, ALUopr : UInt<1>, isImALU : UInt<1>, branchCond : UInt<1>, regChange : UInt<1>, branch : UInt<1>, END : UInt<1>, memWriteEnable : UInt<1>, fromMem : UInt<1>, regWriteEnable : UInt<1>}
    
    node _T = bits(io.opCode, 0, 0) @[ControlUnit.scala 23:25]
    node _T_1 = bits(io.opCode, 1, 1) @[ControlUnit.scala 23:39]
    node im = cat(_T, _T_1) @[Cat.scala 29:58]
    node _T_2 = bits(io.opCode, 2, 2) @[ControlUnit.scala 24:26]
    node _T_3 = bits(io.opCode, 3, 3) @[ControlUnit.scala 24:40]
    node cat = cat(_T_2, _T_3) @[Cat.scala 29:58]
    node _T_4 = bits(io.opCode, 4, 4) @[ControlUnit.scala 25:25]
    node _T_5 = bits(io.opCode, 5, 5) @[ControlUnit.scala 25:39]
    node op = cat(_T_4, _T_5) @[Cat.scala 29:58]
    io.isIm <= UInt<1>("h00") @[ControlUnit.scala 27:11]
    io.ALUopr <= UInt<1>("h00") @[ControlUnit.scala 28:13]
    io.isImALU <= UInt<1>("h00") @[ControlUnit.scala 29:14]
    io.branchCond <= UInt<1>("h00") @[ControlUnit.scala 30:17]
    io.regChange <= UInt<1>("h00") @[ControlUnit.scala 31:16]
    io.branch <= UInt<1>("h00") @[ControlUnit.scala 32:13]
    io.END <= UInt<1>("h00") @[ControlUnit.scala 33:10]
    io.memWriteEnable <= UInt<1>("h00") @[ControlUnit.scala 34:21]
    io.fromMem <= UInt<1>("h00") @[ControlUnit.scala 35:14]
    io.regWriteEnable <= UInt<1>("h00") @[ControlUnit.scala 36:21]
    node _T_6 = eq(UInt<1>("h00"), im) @[Conditional.scala 37:30]
    when _T_6 : @[Conditional.scala 40:58]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_7 = eq(UInt<1>("h01"), im) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<1>("h01"), cat) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 40:58]
          io.regWriteEnable <= UInt<1>("h01") @[ControlUnit.scala 45:29]
          node _T_9 = eq(UInt<1>("h01"), op) @[Conditional.scala 37:30]
          when _T_9 : @[Conditional.scala 40:58]
            io.ALUopr <= UInt<1>("h00") @[ControlUnit.scala 49:25]
            skip @[Conditional.scala 40:58]
          else : @[Conditional.scala 39:67]
            node _T_10 = eq(UInt<2>("h02"), op) @[Conditional.scala 37:30]
            when _T_10 : @[Conditional.scala 39:67]
              io.ALUopr <= UInt<1>("h01") @[ControlUnit.scala 53:25]
              skip @[Conditional.scala 39:67]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_11 = eq(UInt<2>("h02"), cat) @[Conditional.scala 37:30]
          when _T_11 : @[Conditional.scala 39:67]
            io.regChange <= UInt<1>("h01") @[ControlUnit.scala 59:24]
            node _T_12 = eq(UInt<1>("h01"), op) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 40:58]
              io.regWriteEnable <= UInt<1>("h01") @[ControlUnit.scala 63:33]
              io.fromMem <= UInt<1>("h01") @[ControlUnit.scala 64:26]
              skip @[Conditional.scala 40:58]
            else : @[Conditional.scala 39:67]
              node _T_13 = eq(UInt<2>("h02"), op) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                io.memWriteEnable <= UInt<1>("h01") @[ControlUnit.scala 68:33]
                skip @[Conditional.scala 39:67]
            skip @[Conditional.scala 39:67]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_14 = eq(UInt<2>("h02"), im) @[Conditional.scala 37:30]
        when _T_14 : @[Conditional.scala 39:67]
          node _T_15 = eq(UInt<1>("h01"), cat) @[Conditional.scala 37:30]
          when _T_15 : @[Conditional.scala 40:58]
            io.isImALU <= UInt<1>("h01") @[ControlUnit.scala 79:22]
            io.regWriteEnable <= UInt<1>("h01") @[ControlUnit.scala 80:29]
            node _T_16 = eq(UInt<1>("h01"), op) @[Conditional.scala 37:30]
            when _T_16 : @[Conditional.scala 40:58]
              io.ALUopr <= UInt<1>("h00") @[ControlUnit.scala 84:25]
              skip @[Conditional.scala 40:58]
            else : @[Conditional.scala 39:67]
              node _T_17 = eq(UInt<2>("h02"), op) @[Conditional.scala 37:30]
              when _T_17 : @[Conditional.scala 39:67]
                io.ALUopr <= UInt<1>("h01") @[ControlUnit.scala 88:25]
                skip @[Conditional.scala 39:67]
            skip @[Conditional.scala 40:58]
          else : @[Conditional.scala 39:67]
            node _T_18 = eq(UInt<2>("h02"), cat) @[Conditional.scala 37:30]
            when _T_18 : @[Conditional.scala 39:67]
              io.regWriteEnable <= UInt<1>("h01") @[ControlUnit.scala 94:29]
              io.isIm <= UInt<1>("h01") @[ControlUnit.scala 95:19]
              skip @[Conditional.scala 39:67]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_19 = eq(UInt<2>("h03"), im) @[Conditional.scala 37:30]
          when _T_19 : @[Conditional.scala 39:67]
            node _T_20 = eq(UInt<1>("h01"), op) @[Conditional.scala 37:30]
            when _T_20 : @[Conditional.scala 40:58]
              io.branch <= UInt<1>("h01") @[ControlUnit.scala 103:21]
              skip @[Conditional.scala 40:58]
            else : @[Conditional.scala 39:67]
              node _T_21 = eq(UInt<2>("h02"), op) @[Conditional.scala 37:30]
              when _T_21 : @[Conditional.scala 39:67]
                io.regChange <= UInt<1>("h01") @[ControlUnit.scala 107:24]
                io.branchCond <= UInt<1>("h01") @[ControlUnit.scala 108:25]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_22 = eq(UInt<2>("h03"), op) @[Conditional.scala 37:30]
                when _T_22 : @[Conditional.scala 39:67]
                  io.END <= UInt<1>("h01") @[ControlUnit.scala 112:18]
                  skip @[Conditional.scala 39:67]
            skip @[Conditional.scala 39:67]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip op1 : UInt<32>, flip op2 : UInt<32>, flip sel : UInt<1>, result : UInt<32>, isZero : UInt<1>}
    
    io.result <= UInt<1>("h00") @[ALU.scala 15:13]
    node _T = eq(UInt<1>("h00"), io.sel) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = add(io.op1, io.op2) @[ALU.scala 18:34]
      node _T_2 = tail(_T_1, 1) @[ALU.scala 18:34]
      io.result <= _T_2 @[ALU.scala 18:24]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<1>("h01"), io.sel) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = sub(io.op1, io.op2) @[ALU.scala 19:34]
        node _T_5 = tail(_T_4, 1) @[ALU.scala 19:34]
        io.result <= _T_5 @[ALU.scala 19:24]
        skip @[Conditional.scala 39:67]
    io.isZero <= UInt<1>("h00") @[ALU.scala 22:13]
    node _T_6 = eq(io.result, UInt<1>("h00")) @[ALU.scala 24:18]
    when _T_6 : @[ALU.scala 24:26]
      io.isZero <= UInt<1>("h01") @[ALU.scala 25:15]
      skip @[ALU.scala 24:26]
    
  module CPUTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip run : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>, flip testerProgMemEnable : UInt<1>, flip testerProgMemAddress : UInt<16>, testerProgMemDataRead : UInt<32>, flip testerProgMemWriteEnable : UInt<1>, flip testerProgMemDataWrite : UInt<32>}
    
    inst programCounter of ProgramCounter @[CPUTop.scala 23:30]
    programCounter.clock <= clock
    programCounter.reset <= reset
    inst dataMemory of DataMemory @[CPUTop.scala 24:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst programMemory of ProgramMemory @[CPUTop.scala 25:29]
    programMemory.clock <= clock
    programMemory.reset <= reset
    inst registerFile of RegisterFile @[CPUTop.scala 26:28]
    registerFile.clock <= clock
    registerFile.reset <= reset
    inst controlUnit of ControlUnit @[CPUTop.scala 27:27]
    controlUnit.clock <= clock
    controlUnit.reset <= reset
    inst alu of ALU @[CPUTop.scala 28:19]
    alu.clock <= clock
    alu.reset <= reset
    programCounter.io.run <= io.run @[CPUTop.scala 31:25]
    programMemory.io.address <= programCounter.io.programCounter @[CPUTop.scala 32:28]
    node _T = bits(programMemory.io.instructionRead, 31, 26) @[CPUTop.scala 37:60]
    controlUnit.io.opCode <= _T @[CPUTop.scala 37:25]
    registerFile.io.writeEnable <= controlUnit.io.regWriteEnable @[CPUTop.scala 40:31]
    node _T_1 = bits(programMemory.io.instructionRead, 25, 21) @[CPUTop.scala 41:63]
    registerFile.io.writeSel <= _T_1 @[CPUTop.scala 41:28]
    node _T_2 = bits(programMemory.io.instructionRead, 20, 16) @[CPUTop.scala 42:59]
    registerFile.io.aSel <= _T_2 @[CPUTop.scala 42:24]
    node _T_3 = bits(programMemory.io.instructionRead, 25, 21) @[CPUTop.scala 44:82]
    node _T_4 = bits(programMemory.io.instructionRead, 19, 15) @[CPUTop.scala 44:123]
    node bSelResult = mux(controlUnit.io.regChange, _T_3, _T_4) @[CPUTop.scala 44:23]
    registerFile.io.bSel <= bSelResult @[CPUTop.scala 45:24]
    node memOrALU = mux(controlUnit.io.fromMem, dataMemory.io.dataRead, alu.io.result) @[CPUTop.scala 47:21]
    node _T_5 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 49:72]
    node regIm = mux(controlUnit.io.isIm, _T_5, memOrALU) @[CPUTop.scala 49:18]
    registerFile.io.writeData <= regIm @[CPUTop.scala 50:29]
    alu.io.sel <= controlUnit.io.ALUopr @[CPUTop.scala 53:14]
    alu.io.op1 <= registerFile.io.a @[CPUTop.scala 55:14]
    node _T_6 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 57:74]
    node bALU = mux(controlUnit.io.isImALU, _T_6, registerFile.io.b) @[CPUTop.scala 57:17]
    alu.io.op2 <= bALU @[CPUTop.scala 58:14]
    dataMemory.io.writeEnable <= controlUnit.io.memWriteEnable @[CPUTop.scala 61:29]
    dataMemory.io.address <= registerFile.io.a @[CPUTop.scala 63:25]
    dataMemory.io.dataWrite <= registerFile.io.b @[CPUTop.scala 64:27]
    node eqJump = and(controlUnit.io.branchCond, alu.io.isZero) @[CPUTop.scala 67:42]
    node finalJump = or(eqJump, controlUnit.io.branch) @[CPUTop.scala 69:26]
    programCounter.io.jump <= finalJump @[CPUTop.scala 71:26]
    programCounter.io.stop <= controlUnit.io.END @[CPUTop.scala 73:26]
    programCounter.io.run <= io.run @[CPUTop.scala 75:25]
    node _T_7 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 77:75]
    programCounter.io.programCounterJump <= _T_7 @[CPUTop.scala 77:40]
    io.done <= controlUnit.io.END @[CPUTop.scala 79:11]
    programMemory.io.testerAddress <= io.testerProgMemAddress @[CPUTop.scala 83:34]
    io.testerProgMemDataRead <= programMemory.io.testerDataRead @[CPUTop.scala 84:28]
    programMemory.io.testerDataWrite <= io.testerProgMemDataWrite @[CPUTop.scala 85:36]
    programMemory.io.testerEnable <= io.testerProgMemEnable @[CPUTop.scala 86:33]
    programMemory.io.testerWriteEnable <= io.testerProgMemWriteEnable @[CPUTop.scala 87:38]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[CPUTop.scala 89:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[CPUTop.scala 90:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[CPUTop.scala 91:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[CPUTop.scala 92:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[CPUTop.scala 93:35]
    
