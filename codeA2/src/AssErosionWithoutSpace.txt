LI R1, 0; //Start x for-loop
LI R2, 0; //Start y for-loop
LI R4, 0; //Set R4 to 0 //Line 3
ADD R4, R4, R1; //Adding x to R4
LI R3, 0; //Set R3 to 0
ADD R3, R3, R2; //Make R3 and R2 have the same value
LI R7, 0;
BEQ  R3, R7, 13;//Check if R3 is zero, if yes jump to line 18 //Line 13
ADDI R4, R4, 20; //Add 20 to R4
SUBI R3, R3, 1; //Subtract 1 from R3
BRANCH 8; //Go back to line 13
LI R7, 0;
BEQ R1, R7, 21;//If x is 0, jump to line 35 //Line 18
LI R7, 0;
BEQ R2, R7, 21; //If y is 0, jump to line 35
LI R7, 19;
BEQ R1, R7, 21; //If x is 19, jump to line 35
LI R7, 19;
BEQ R2, R7, 21; //If y is 19, jump to line 35
BRANCH 46 //Jump to line 46
LI R3, 0; //Set R3 to 0 //Line 35
ADDI R4, R4, 400;
SD R3, R4;
BRANCH 102; //Jump to end of for-loop
LD R3, R4; //Load the value from the address of R4 to R3 //Line 46
LI R7, 255;
BEQ R3, R7, 59; //If R3 is 255, jump to line 59
LI R3, 0;
ADDI R4, R4, 400;
SD R3, R4;
BRANCH 102; //Jump to end of for-loop
LI R5, 0; //Setting R5 to 0 //Line 59
SUBI R5, R4, 1; //Setting R5 to R4 minus 1
LD R3, R5; //Load the value from the address of R5 to R3
LI R7, 0;
BEQ R3, R7, 88; //If R3 is 255, jump to line 88
ADDI R5, R4, 1; //Setting R5 to R4 plus 1
LD R3, R5; //Load the value from the address of R5 to R3
LI R7, 0;
BEQ R3, R7, 88; //If R3 is 255, jump to line 88
SUBI R5, R4, 20; //Setting R5 to R4 minus 20
LD R3, R5; //Load the value from the address of R5 to R3
LI R7, 0;
BEQ R3, R7, 88; //If R3 is 255, jump to line 88
ADDI R5, R4, 20; //Setting R5 to R4 plus 20
LD R3, R5; //Load the value from the address of R5 to R3
LI R7, 0;
BEQ R3, R7, 88; //If R3 is 255, jump to line 88
BRANCH 95 //If no black neighbouring pixel is found, jump to line 95
ADDI R4, R4, 400; //Changing address to output image //Line 88
LI R3, 0; //Setting R3 to 0
SD R3, R4; //Store 0 in the address
BRANCH 102; //Jump to end of for-loop
ADDI R4, R4, 400; //Changing address to output image //Line 95
LI R3, 255; //Setting R3 to 255
SD R3, R4; //Store 255 in the address
BRANCH 102; //Jump to end of for-loop
ADDI R2, R2, 1; //Adding 1 to y //Line 102
LI R7, 20;
BEQ R2, R7, 113; //If y is 20 jump to 113
BRANCH 3;
ADDI R1, R1, 1; //Adding 1 to x //Line 113
LI R7, 20;
BEQ R1, R7, 121; //If X is 20 jump to 121
BRANCH 2;
END; //Line 121